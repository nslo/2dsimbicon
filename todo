Briefly remind us what was your original goal / plan.

What did you actually do?   Give a little bit of detail here.

Show your results.

Give some analysis of the results if you can -- if your technique uses parameters, how do varying those parameters make a difference?   If you tried different approaches, compare them.

Discuss.   What insights did you gain?     What worked as expected and what surprised you?   What did you learn as a result of doing the project?   What would you change if you were to start over again?

What would you do to extend the project if you had more time?



Sim:
- tune parameters for robustness
- startup from standstill
- speed (opengl/glfw?)
- run
- uneven terrain
- 3d

Things done:
- Had to turn force limits down
- Altered contact model resulting in slightly nicer gait
- If I alter gait (swing hip / knee angles) for a higher step, more robust to pushes

State transitions:
- Keep timer (global? each state struct?)
- Figure out when a foot collision happens (?)
- Figure out which leg (left or right) is swing and which is stance

Target angles:
- For all joints except stance hip & swing hip, target angle comes from FSM and current angle/velocity
- For swing hip and stance hip, calculate angle and velocity relative to y-axis
    * angle: dBodyVectorToWorld ? + double angleInRadians = std::atan2(y, x);
    * velocity: ????  dBodyGetAngularVel (is this just about whatever the axis of rotation is? <--- which is z)
- For swing hip, then apply feedback gains
    - d: dJointGetHingeAnchor (hip minus stance foot, just x coord)
        - or dBodyGetRelPointPos - how to specify the single point? getanchor?
    - v: - dBodyGetLinearVel ? (that's the center of mass, not hip)
        - put a virtual body on the hip with no mass?
        - dBodyGetPointVel (with point from getanchor, which is in world coords)?

Torques:
- For all joints except stance hip, apply PD controller
- For stance hip, first calculate PD control of virtual torso
- Then calculate torque of stance hip

Misc:
- joint, target, torque limits?  (torque limits are 1000 in paper; look at jsimbicon)
    - joint limits: dJointSetHingeParam(dJointID, dParamLoStop, dReal value);
- find out what the zero reference angle is for joints - were they set straight?
* figure out what 0.3 means in terms of simulator time
* figure out handedness of angles; are knees reversed?
